name: Build and Deploy OpenTelemetry Collector with Dynatrace

on:
  workflow_dispatch:
    inputs:
      build_binary:
        description: 'Build binary artifact'
        required: false
        default: false
        type: boolean
      upload_binary_to_jfrog:
        description: 'Upload binary to JFrog'
        required: false
        default: false
        type: boolean
      build_docker:
        description: 'Build Docker image'
        required: false
        default: false
        type: boolean
      upload_docker_to_ecr:
        description: 'Upload Docker to ECR'
        required: false
        default: false
        type: boolean

env:
  GOLANG_VERSION: '1.24'
  OCB_VERSION: '0.137.0'

jobs:
  build-binary:
    name: "1. Build Binary"
    runs-on: ubuntu-latest
    if: github.event.inputs.build_binary == 'true'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      filename: ${{ steps.filename.outputs.filename }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set filename
      id: filename
      run: |
        FILENAME="otelcol-dynatrace-${{ steps.version.outputs.version }}-linux-amd64.tar.gz"
        echo "filename=$FILENAME" >> $GITHUB_OUTPUT

    - name: Install OpenTelemetry Collector Builder
      run: |
        curl --proto '=https' --tlsv1.2 -fL -o ocb \
        "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2Fv${{ env.OCB_VERSION }}/ocb_${{ env.OCB_VERSION }}_linux_amd64"
        chmod +x ocb

    - name: Build collector for Linux AMD64
      run: |
        export VERSION=${{ steps.version.outputs.version }}
        export GOOS=linux
        export GOARCH=amd64
        ./ocb --config builder-config.yaml
      
    - name: Create binary archive
      run: |
        cd dist
        chmod +x otelcol-dynatrace
        tar -czf ${{ steps.filename.outputs.filename }} otelcol-dynatrace

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: otelcol-dynatrace-binary
        path: dist/${{ steps.filename.outputs.filename }}
        retention-days: 30

  upload-binary-to-jfrog:
    name: "2. Upload Binary to JFrog"
    runs-on: ubuntu-latest
    needs: build-binary
    if: |
      github.event.inputs.upload_binary_to_jfrog == 'true' && 
      needs.build-binary.result == 'success'
    
    steps:
    - name: Download binary artifact
      uses: actions/download-artifact@v4
      with:
        name: otelcol-dynatrace-binary

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      with:
        version: 2.81.0
      env:
        JF_URL: ${{ secrets.JFROG_URL }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

    - name: Upload binary to JFrog
      run: |
        VERSION=${{ needs.build-binary.outputs.version }}
        FILENAME=${{ needs.build-binary.outputs.filename }}
        
        jf rt upload "$FILENAME" \
          "${{ secrets.JFROG_REPOSITORY }}/otelcol-dynatrace/$VERSION/linux-amd64/" \
          --build-name="otelcol-dynatrace" \
          --build-number="$VERSION" \
          --module="otelcol-dynatrace-linux-amd64"
        
        # Publish build info
        jf rt build-publish "otelcol-dynatrace" "$VERSION"

  build-docker:
    name: "3. Build Docker Image"
    runs-on: ubuntu-latest
    if: github.event.inputs.build_docker == 'true'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      image-tag: ${{ steps.docker-tag.outputs.tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate Docker tag with timestamp
      id: docker-tag
      run: |
        TIMESTAMP=$(date +'%y%m%d-%H%M')
        TAG="otelcol-dynatrace-${TIMESTAMP}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: temp-image:${{ steps.docker-tag.outputs.tag }}
        labels: |
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.description=Custom OpenTelemetry Collector with Dynatrace receiver integration
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.title=otelcol-dynatrace
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COLLECTOR_BUILDER_VERSION=v${{ env.OCB_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  upload-docker-to-ecr:
    name: "4. Upload Docker to ECR"
    runs-on: ubuntu-latest
    needs: build-docker
    if: |
      github.event.inputs.upload_docker_to_ecr == 'true' && 
      needs.build-docker.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image to ECR
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.AWS_ECR_REGISTRY }}:${{ needs.build-docker.outputs.image-tag }}
        labels: |
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.description=Custom OpenTelemetry Collector with Dynatrace receiver integration
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.title=otelcol-dynatrace
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.version=${{ needs.build-docker.outputs.version }}
        build-args: |
          VERSION=${{ needs.build-docker.outputs.version }}
          COLLECTOR_BUILDER_VERSION=v${{ env.OCB_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max