name: Build and Deploy OpenTelemetry Collector with Dynatrace

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_to_jfrog:
        description: 'Deploy binary to JFrog'
        required: false
        default: true
        type: boolean
      deploy_to_ecr:
        description: 'Deploy Docker image to ECR'
        required: false
        default: false
        type: boolean

env:
  GOLANG_VERSION: '1.21'
  COLLECTOR_BUILDER_VERSION: 'v0.112.0'
  REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  IMAGE_NAME: otelcol-dynatrace

jobs:
  # Job 1: Build binary for Linux AMD64 only
  build-binary:
    name: Build OpenTelemetry Collector Binary
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Install OpenTelemetry Collector Builder
      run: |
        go install go.opentelemetry.io/collector/cmd/builder@${{ env.COLLECTOR_BUILDER_VERSION }}

    - name: Build collector for Linux AMD64
      run: |
        export VERSION=${{ steps.version.outputs.version }}
        export GOOS=linux
        export GOARCH=amd64
        builder --config builder-config.yaml
      
    - name: Create binary archive
      run: |
        cd dist
        chmod +x otelcol-dynatrace
        tar -czf otelcol-dynatrace-${{ steps.version.outputs.version }}-linux-amd64.tar.gz otelcol-dynatrace

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: otelcol-dynatrace-linux-amd64
        path: dist/otelcol-dynatrace-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
        retention-days: 30

  # Job 2: Upload to JFrog Artifactory
  upload-to-jfrog:
    name: Upload Binary to JFrog Artifactory
    runs-on: ubuntu-latest
    needs: build-binary
    if: |
      (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_jfrog == 'true')
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: otelcol-dynatrace-linux-amd64

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v3
      env:
        JF_URL: ${{ secrets.JFROG_URL }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

    - name: Upload binary to JFrog
      run: |
        VERSION=${{ needs.build-binary.outputs.version }}
        FILE="otelcol-dynatrace-$VERSION-linux-amd64.tar.gz"
        
        jf rt upload "$FILE" \
          "${{ secrets.JFROG_REPOSITORY }}/otelcol-dynatrace/$VERSION/linux-amd64/" \
          --build-name="otelcol-dynatrace" \
          --build-number="$VERSION" \
          --module="otelcol-dynatrace-linux-amd64"
        
        # Publish build info
        jf rt build-publish "otelcol-dynatrace" "$VERSION"

  # Job 3: Build and push Docker image
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-binary
    if: |
      (github.event_name == 'push' && contains(github.ref, 'refs/tags/')) || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_to_ecr == 'true')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image for Linux AMD64
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.build-binary.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update ECS service (optional)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Optional: Automatic ECS service update
        if [ -n "${{ secrets.ECS_CLUSTER_NAME }}" ] && [ -n "${{ secrets.ECS_SERVICE_NAME }}" ]; then
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
            --service ${{ secrets.ECS_SERVICE_NAME }} \
            --force-new-deployment
        fi

  # Job 4: Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-binary, upload-to-jfrog, build-and-push-docker]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: otelcol-dynatrace-linux-amd64

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          otelcol-dynatrace-*.tar.gz
        body: |
          ## OpenTelemetry Collector with Dynatrace v${{ needs.build-binary.outputs.version }}
          
          ### Features
          - Custom Dynatrace receiver for metrics collection
          - Optimized for Red Hat Linux VM and AWS ECS deployment
          - Docker image available in ECR
          - JFrog Artifactory distribution
          
          ### Supported Platform
          - Linux AMD64 only
          
          ### Docker Image
          ```bash
          docker pull ${{ secrets.AWS_ECR_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-binary.outputs.version }}
          ```
          
          ### Configuration
          See `collector-config.yaml` for example configuration.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}