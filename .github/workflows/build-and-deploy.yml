name: Build and Deploy OT Collector Contrib

# Manual workflow for building OpenTelemetry Collector Contrib with Dynatrace receiver
# Always builds binary artifact, with optional deployments to JFrog and ECR
run-name: Build and Deploy OT Collector [${{ github.event.inputs.environment }}] - JFrog:${{ github.event.inputs.deploy_to_jfrog }} Docker:${{ github.event.inputs.build_and_push_docker }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        type: choice
        options:
          - DEV
          - TST
        default: DEV
      deploy_to_jfrog:
        description: 'Deploy binary to JFrog Artifactory'
        required: false
        default: false
        type: boolean
      build_and_push_docker:
        description: 'Build and push Docker image to AWS ECR'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write

env:
  GOLANG_VERSION: '1.24'
  OCB_VERSION: '0.137.0'

jobs:
  # Generate version string and artifact names used across all jobs
  setup:
    name: Setup Build Variables (${{ github.event.inputs.environment }})
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      environment: ${{ steps.version.outputs.environment }}
      binary-filename: ${{ steps.version.outputs.binary-filename }}
      binary-artifact-name: ${{ steps.version.outputs.binary-artifact-name }}
      docker-tag: ${{ steps.version.outputs.docker-tag }}
    steps:
      - name: Generate version and filenames
        id: version
        run: |
          TIMESTAMP=$(date +'%Y%m%d%H%M%S')
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # For tags, use clean version without env prefix
            VERSION_CLEAN=${GITHUB_REF#refs/tags/v}
            VERSION_FULL="v${VERSION_CLEAN}"
          else
            # For development builds, create clean version identifier
            VERSION_CLEAN="$(echo $GITHUB_SHA | cut -c1-8)-${TIMESTAMP}"
            VERSION_FULL="dev-${VERSION_CLEAN}"
          fi
          ENV=${{ github.event.inputs.environment }}
          OS="linux"
          ARCH="amd64"
          
          echo "version=$VERSION_FULL" >> $GITHUB_OUTPUT
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "binary-filename=otelcol-dynatrace-${ENV}-${VERSION_CLEAN}-${OS}-${ARCH}.tar.gz" >> $GITHUB_OUTPUT
          echo "binary-artifact-name=otelcol-dynatrace-${ENV}-${VERSION_CLEAN}-${OS}-${ARCH}" >> $GITHUB_OUTPUT
          echo "docker-tag=otelcol-dynatrace-${ENV}-${VERSION_CLEAN}-${OS}-${ARCH}" >> $GITHUB_OUTPUT

  # Build OpenTelemetry Collector binary - always runs to ensure artifact availability
  build-binary:
    name: Build Binary Artifact (${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache: false

      - name: Install OpenTelemetry Collector Builder
        run: |
          # Download OCB (OpenTelemetry Collector Builder) from official releases
          curl --proto '=https' --tlsv1.2 -fL -o ocb \
            "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2Fv${{ env.OCB_VERSION }}/ocb_${{ env.OCB_VERSION }}_linux_amd64"
          chmod +x ocb
          # Verify OCB was downloaded successfully
          ./ocb version

      - name: Build OpenTelemetry Collector Contrib
        run: |
          # Set environment variables for OCB
          export VERSION=${{ needs.setup.outputs.version }}
          export GOOS=linux
          export GOARCH=amd64
          # Build collector using configuration from builder-config.yaml
          ./ocb --config builder-config.yaml
      
      - name: Create binary archive
        run: |
          cd dist
          chmod +x otelcol-dynatrace
          # Create compressed archive for distribution
          tar -czf ${{ needs.setup.outputs.binary-filename }} otelcol-dynatrace

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.setup.outputs.binary-artifact-name }}
          path: dist/${{ needs.setup.outputs.binary-filename }}
          retention-days: 1  # Artifacts automatically removed after 1 day

  # Deploy binary artifact to JFrog Artifactory - optional job
  # Uses repository secrets (shared across environments)
  deploy-to-jfrog:
    name: Deploy Binary to JFrog Artifactory (${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    needs: [setup, build-binary]
    if: github.event.inputs.deploy_to_jfrog == 'true'
    
    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup.outputs.binary-artifact-name }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.81.0
        env:
          # JFrog connection configuration from repository secrets
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_USER: ${{ secrets.JFROG_USERNAME }}
          JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      - name: Upload to JFrog Artifactory
        run: |
          VERSION=${{ needs.setup.outputs.version }}
          ENVIRONMENT=${{ needs.setup.outputs.environment }}
          FILENAME=${{ needs.setup.outputs.binary-filename }}
          
          # Upload binary with build metadata
          jf rt upload "$FILENAME" \
            "${{ secrets.JFROG_REPOSITORY }}/otelcol-dynatrace/$ENVIRONMENT/$VERSION/linux-amd64/" \
            --build-name="otelcol-dynatrace-$ENVIRONMENT" \
            --build-number="$VERSION" \
            --module="otelcol-dynatrace-$ENVIRONMENT-linux-amd64"
          
          # Publish build information to JFrog
          jf rt build-publish "otelcol-dynatrace-$ENVIRONMENT" "$VERSION"

  # Build Docker image and push to ECR - optional job, reuses binary artifact
  build-and-push-docker:
    name: Build and Push Docker Image to ECR (${{ needs.setup.outputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [setup, build-binary]
    if: github.event.inputs.build_and_push_docker == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup.outputs.binary-artifact-name }}
          path: ./prebuilt-binary  # docker-build.sh expects artifacts here

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # AWS credentials from environment secrets (DEV/TST specific)
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          # Use docker-build.sh script which detects and uses prebuilt binary
          ./scripts/docker-build.sh \
            "${{ needs.setup.outputs.version }}" \
            "v${{ env.OCB_VERSION }}" \
            "${{ secrets.AWS_ECR_REGISTRY }}" \
            "${{ needs.setup.outputs.docker-tag }}"

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ECR_REGISTRY }}:${{ needs.setup.outputs.docker-tag }}


