name: Build and Deploy OpenTelemetry Collector with Dynatrace

on:
  workflow_dispatch:
    inputs:
      ocb_version:
        description: 'OpenTelemetry Collector Builder version (e.g., v0.137.0)'
        required: true
        default: 'v0.137.0'
        type: string
      build_binary:
        description: 'Build binary artifact'
        required: false
        default: true
        type: boolean
      upload_to_jfrog:
        description: 'Upload binary to JFrog Artifactory'
        required: false
        default: false
        type: boolean
      build_and_push_docker:
        description: 'Build and push Docker image to ECR'
        required: false
        default: false
        type: boolean
      ecr_repository_name:
        description: 'ECR repository name (leave empty to use default: otelcol-dynatrace)'
        required: false
        default: 'otelcol-dynatrace'
        type: string

env:
  GOLANG_VERSION: '1.24'

jobs:
  # Job 1: Build binary for Linux AMD64 only
  build-binary:
    name: Build OpenTelemetry Collector Binary
    runs-on: ubuntu-latest
    if: github.event.inputs.build_binary == 'true'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Install OpenTelemetry Collector Builder
      run: |
        VERSION="${{ github.event.inputs.ocb_version }}"
        VERSION_NO_V="${VERSION#v}"
        curl --proto '=https' --tlsv1.2 -fL -o ocb \
        "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2F${{ github.event.inputs.ocb_version }}/ocb_${VERSION_NO_V}_linux_amd64"
        chmod +x ocb

    - name: Build collector for Linux AMD64
      run: |
        export VERSION=${{ steps.version.outputs.version }}
        export GOOS=linux
        export GOARCH=amd64
        ./ocb --config builder-config.yaml
      
    - name: Create binary archive
      run: |
        cd dist
        chmod +x otelcol-dynatrace
        tar -czf otelcol-dynatrace-${{ steps.version.outputs.version }}-linux-amd64.tar.gz otelcol-dynatrace

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: otelcol-dynatrace-linux-amd64
        path: dist/otelcol-dynatrace-${{ steps.version.outputs.version }}-linux-amd64.tar.gz
        retention-days: 30

  # Job 2: Upload to JFrog Artifactory
  upload-to-jfrog:
    name: Upload Binary to JFrog Artifactory
    runs-on: ubuntu-latest
    needs: build-binary
    if: |
      github.event.inputs.upload_to_jfrog == 'true' && 
      needs.build-binary.result == 'success'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: otelcol-dynatrace-linux-amd64

    - name: Setup JFrog CLI
      uses: jfrog/setup-jfrog-cli@v4
      with:
        version: 2.81.0
      env:
        JF_URL: ${{ secrets.JFROG_URL }}
        JF_USER: ${{ secrets.JFROG_USERNAME }}
        JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

    - name: Upload binary to JFrog
      run: |
        VERSION=${{ needs.build-binary.outputs.version }}
        FILE="otelcol-dynatrace-$VERSION-linux-amd64.tar.gz"
        
        jf rt upload "$FILE" \
          "${{ secrets.JFROG_REPOSITORY }}/otelcol-dynatrace/$VERSION/linux-amd64/" \
          --build-name="otelcol-dynatrace" \
          --build-number="$VERSION" \
          --module="otelcol-dynatrace-linux-amd64"
        
        # Publish build info
        jf rt build-publish "otelcol-dynatrace" "$VERSION"

  # Job 3: Build and push Docker image
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    if: github.event.inputs.build_and_push_docker == 'true'
    
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine version
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Generate Docker tag with timestamp
      id: docker-tag
      run: |
        TIMESTAMP=$(date +'%y%m%d-%H%M')
        TAG="otelcol-dynatrace-${TIMESTAMP}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "full-image=${{ secrets.AWS_ECR_REGISTRY }}:${TAG}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image for Linux AMD64
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.docker-tag.outputs.full-image }}
        labels: |
          org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          org.opencontainers.image.description=Custom OpenTelemetry Collector with Dynatrace receiver integration
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.title=otelcol-dynatrace
          org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
        build-args: |
          VERSION=${{ steps.version.outputs.version }}
          COLLECTOR_BUILDER_VERSION=${{ github.event.inputs.ocb_version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max