name: Build and Deploy OpenTelemetry Collector

on:
  workflow_dispatch:
    inputs:
      build_binary:
        description: 'Build binary artifact'
        required: false
        default: false
        type: boolean
      deploy_to_jfrog:
        description: 'Deploy binary to JFrog Artifactory'
        required: false
        default: false
        type: boolean
      build_and_push_docker:
        description: 'Build and push Docker image to AWS ECR'
        required: false
        default: false
        type: boolean

env:
  GOLANG_VERSION: '1.24'
  OCB_VERSION: '0.137.0'
  REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}

jobs:
  # Shared version step
  setup:
    name: Setup Build Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      binary-filename: ${{ steps.filenames.outputs.binary }}
      docker-tag: ${{ steps.filenames.outputs.docker-tag }}
    steps:
      - name: Generate version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="dev-$(echo $GITHUB_SHA | cut -c1-8)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate filenames
        id: filenames
        run: |
          VERSION=${{ steps.version.outputs.version }}
          TIMESTAMP=$(date +'%y%m%d-%H%M')
          
          echo "binary=otelcol-dynatrace-${VERSION}-linux-amd64.tar.gz" >> $GITHUB_OUTPUT
          echo "docker-tag=otelcol-dynatrace-${TIMESTAMP}" >> $GITHUB_OUTPUT

  build-binary:
    name: Build Binary Artifact
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.build_binary == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GOLANG_VERSION }}

      - name: Install OpenTelemetry Collector Builder
        run: |
          curl --proto '=https' --tlsv1.2 -fL -o ocb \
            "https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2Fv${{ env.OCB_VERSION }}/ocb_${{ env.OCB_VERSION }}_linux_amd64"
          chmod +x ocb

      - name: Build OpenTelemetry Collector
        run: |
          export VERSION=${{ needs.setup.outputs.version }}
          export GOOS=linux
          export GOARCH=amd64
          ./ocb --config builder-config.yaml
      
      - name: Create binary archive
        run: |
          cd dist
          chmod +x otelcol-dynatrace
          tar -czf ${{ needs.setup.outputs.binary-filename }} otelcol-dynatrace

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-artifact
          path: dist/${{ needs.setup.outputs.binary-filename }}
          retention-days: 30

  deploy-to-jfrog:
    name: Deploy Binary to JFrog Artifactory
    runs-on: ubuntu-latest
    needs: [setup, build-binary]
    if: |
      github.event.inputs.deploy_to_jfrog == 'true' && 
      needs.build-binary.result == 'success'
    
    steps:
      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: binary-artifact

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        with:
          version: 2.81.0
        env:
          JF_URL: ${{ secrets.JFROG_URL }}
          JF_USER: ${{ secrets.JFROG_USERNAME }}
          JF_PASSWORD: ${{ secrets.JFROG_PASSWORD }}

      - name: Upload to JFrog Artifactory
        run: |
          VERSION=${{ needs.setup.outputs.version }}
          FILENAME=${{ needs.setup.outputs.binary-filename }}
          
          jf rt upload "$FILENAME" \
            "${{ secrets.JFROG_REPOSITORY }}/otelcol-dynatrace/$VERSION/linux-amd64/" \
            --build-name="otelcol-dynatrace" \
            --build-number="$VERSION" \
            --module="otelcol-dynatrace-linux-amd64"
          
          jf rt build-publish "otelcol-dynatrace" "$VERSION"

  build-and-push-docker:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.build_and_push_docker == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}:${{ needs.setup.outputs.docker-tag }}
          labels: |
            org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            org.opencontainers.image.description=Custom OpenTelemetry Collector with Dynatrace receiver
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.title=otelcol-dynatrace
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.version=${{ needs.setup.outputs.version }}
          build-args: |
            VERSION=${{ needs.setup.outputs.version }}
            COLLECTOR_BUILDER_VERSION=v${{ env.OCB_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max